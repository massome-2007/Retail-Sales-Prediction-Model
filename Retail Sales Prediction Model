import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Sample data
data = {
    'date': pd.date_range(start='2023-01-01', periods=100, freq='D'),
    'store_location': np.random.choice(['Urban', 'Suburban', 'Rural'], 100),
    'day_of_week': np.random.choice(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], 100),
    'promotion': np.random.choice([0, 1], 100),
    'sales': np.random.randint(100, 500, 100)
}
df = pd.DataFrame(data)

# Feature engineering
df['day_of_week_num'] = df['day_of_week'].map({'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3, 'Friday': 4, 'Saturday': 5, 'Sunday': 6})
df = pd.get_dummies(df, columns=['store_location'], drop_first=True)

# Features and target variable
X = df[['day_of_week_num', 'promotion', 'store_location_Suburban', 'store_location_Urban']]
y = df['sales']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predicting on the test set
y_pred = model.predict(X_test)

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Plotting the actual vs predicted sales
plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Actual Sales')
plt.plot(y_pred, label='Predicted Sales')
plt.xlabel('Days')
plt.ylabel('Sales')
plt.title('Actual vs Predicted Sales')
plt.legend()
plt.show()

# Generating actionable insights for management
feature_importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
print("Feature Importances:")
print(feature_importances)

if 'promotion' in feature_importances and feature_importances['promotion'] > 0.2:
    print("Promotional events significantly impact sales. Management should consider running promotions more frequently.")
if 'store_location_Urban' in feature_importances and feature_importances['store_location_Urban'] > 0.2:
    print("Urban store locations have a significant impact on sales. Management should explore opening more stores in urban areas.")
